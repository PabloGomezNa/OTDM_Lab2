#.Run file that implements the DUAL SVM methods and calculates the accuracy

#Every variable first must be defined as "param" and then make the  
#thing with "let"
reset;

# ========================================
# 1. Train
# ========================================

#Select the solver to use
option solver minos;

model dual.mod; #Load our model
#data .\processed_data\data_train_800.dat; #Load the training data
#data .\processed_data\data_train_8000.dat; #Load the training data
data .\processed_data\Student_performance_train_data.dat; #Load the training data
	
let C := 1; #Set regularization parameter

solve; #Solve the optm. problem
# Compute w from alpha, y, and X
param w {1..n};
for {k in 1..n} {
    let w[k] := sum {i in N} alpha[i] * y[i] * X[i,k];
}

# Compute b using support vectors
param b_values {i in N};

param b_sum;
let b_sum := 0;

param num_SV;
let num_SV := 0;

for {i in N} {
    if alpha[i] > 1e-6 and alpha[i] < C - 1e-6 then {
        let b_values[i] := y[i] - sum {j in N} alpha[j] * y[j] * (sum {k in 1..n} X[j,k] * X[i,k]);
        let b_sum := b_sum + b_values[i];
        let num_SV := num_SV + 1;
    }
}

param b;
let b := b_sum / num_SV;

#if num_SV > 0 then {
#    let b := b_sum / num_SV;
#} else {
#    print "No support vectors found. Cannot compute b.";
#    exit 1;
#}




display w, b;

# ========================================
# 2. Testing Phase
# ========================================

#data .\processed_data\data_test_200.dat; #Load the training data
#data .\processed_data\data_test_2000.dat; #Load the training data
data .\processed_data\Student_performance_test_data.dat; #Load the training data

# Make predictions using computed w and b
param y_pred {i in N_test};

#Declare new variables we will use
param correct_predictions;
param accuracy;

for {i in N_test} {
    let y_pred[i] := if sum {j in 1..n} w[j] * X_test[i,j] + b >= 0 then 1 else -1;
}

# Calculate accuracy
let correct_predictions := sum {i in N_test} (if y_test[i] = y_pred[i] then 1 else 0);
let accuracy := correct_predictions / card(N_test);

display correct_predictions, accuracy;